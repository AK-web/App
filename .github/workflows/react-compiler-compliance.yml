name: React Compiler Compliance Check

on:
  pull_request:
    paths:
      - 'src/**/*.tsx'
      - 'src/**/*.ts'
      - 'scripts/react-compiler-tracker.ts'
      - 'package.json'
  push:
    branches:
      - main
    paths:
      - 'src/**/*.tsx'
      - 'src/**/*.ts'
      - 'scripts/react-compiler-tracker.ts'
      - 'package.json'

jobs:
  react-compiler-compliance:
    name: React Compiler Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.3'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run React Compiler Compliance Check
        run: npm run react-compiler-tracker check-changed

      - name: Upload React Compiler Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: react-compiler-report
          path: |
            react-compiler-output.json
            react-compiler-report.json
            .react-compiler-tracker.json
          retention-days: 30

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = '## üîß React Compiler Compliance Check\n\n';

            try {
              // Check if the compliance check passed
              const trackerFile = '.react-compiler-tracker.json';
              if (fs.existsSync(trackerFile)) {
                const trackerData = JSON.parse(fs.readFileSync(trackerFile, 'utf8'));
                const totalComponents = Object.keys(trackerData.components).length;
                const compilable = Object.values(trackerData.components).filter(c => c.canCompile).length;
                const nonCompilable = totalComponents - compilable;

                comment += `### üìä Current Status\n`;
                comment += `- **Total tracked components**: ${totalComponents}\n`;
                comment += `- **Compilable**: ${compilable} ‚úÖ\n`;
                comment += `- **Non-compilable**: ${nonCompilable} ${nonCompilable > 0 ? '‚ùå' : '‚úÖ'}\n\n`;

                if (nonCompilable > 0) {
                  comment += `### ‚ö†Ô∏è Non-compilable Components\n`;
                  comment += `The following components cannot be compiled by React Compiler:\n\n`;

                  Object.values(trackerData.components)
                    .filter(c => !c.canCompile)
                    .slice(0, 10) // Limit to first 10 for readability
                    .forEach(c => {
                      comment += `- \`${c.file}\` (last checked: ${new Date(c.lastChecked).toLocaleDateString()})\n`;
                    });

                  if (nonCompilable > 10) {
                    comment += `\n... and ${nonCompilable - 10} more components.\n`;
                  }

                  comment += `\n> üí° **Tip**: Run \`npm run react-compiler-tracker report\` locally to see detailed failure reasons.\n`;
                }
              }

              // Check if there's a detailed report
              const reportFile = 'react-compiler-report.json';
              if (fs.existsSync(reportFile)) {
                const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
                comment += `\n### üìã Latest Check Results\n`;
                comment += `- **Successfully compiled**: ${report.summary.success} components\n`;
                comment += `- **Failed to compile**: ${report.summary.failure} components\n`;
                comment += `- **Check timestamp**: ${new Date(report.timestamp).toLocaleString()}\n`;
              }

            } catch (error) {
              comment += `‚ùå Error generating report: ${error.message}\n`;
            }

            comment += `\n### üõ†Ô∏è Available Commands\n`;
            comment += `- \`npm run react-compiler-tracker status\` - Show current tracker status\n`;
            comment += `- \`npm run react-compiler-tracker report\` - Generate detailed report\n`;
            comment += `- \`npm run react-compiler-tracker check-file <path>\` - Check specific file\n`;
            comment += `- \`npm run react-compiler-tracker full-check\` - Run full check\n`;

            // Find existing comment and update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('React Compiler Compliance Check')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
