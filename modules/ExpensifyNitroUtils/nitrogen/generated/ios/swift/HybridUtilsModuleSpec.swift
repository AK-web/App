///
/// HybridUtilsModuleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridUtilsModuleSpec``
public protocol HybridUtilsModuleSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  
}

/// See ``HybridUtilsModuleSpec``
public class HybridUtilsModuleSpec_base {
  private weak var cxxWrapper: HybridUtilsModuleSpec_cxx? = nil
  public func getCxxWrapper() -> HybridUtilsModuleSpec_cxx {
  #if DEBUG
    guard self is HybridUtilsModuleSpec else {
      fatalError("`self` is not a `HybridUtilsModuleSpec`! Did you accidentally inherit from `HybridUtilsModuleSpec_base` instead of `HybridUtilsModuleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridUtilsModuleSpec_cxx(self as! HybridUtilsModuleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the UtilsModule HybridObject.
 * Implement this protocol to create Swift-based instances of UtilsModule.
 * ```swift
 * class HybridUtilsModule : HybridUtilsModuleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridUtilsModuleSpec = HybridUtilsModuleSpec_protocol & HybridUtilsModuleSpec_base
