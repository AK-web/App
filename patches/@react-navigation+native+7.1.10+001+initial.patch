diff --git a/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js b/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
index 474db5e..b3167bc 100644
--- a/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
+++ b/node_modules/@react-navigation/native/lib/module/createMemoryHistory.js
@@ -1,6 +1,7 @@
 "use strict";
 
 import { nanoid } from 'nanoid/non-secure';
+import { findFocusedRouteKey } from "./findFocusedRouteKey.js";
 export function createMemoryHistory() {
   let index = 0;
   let items = [];
@@ -17,7 +18,10 @@ export function createMemoryHistory() {
       it.cb = () => cb(true);
     });
   };
-  const history = {
+  return {
+    get items() {
+      return items;
+    },
     get index() {
       // We store an id in the state instead of an index
       // Index could get out of sync with in-memory values if page reloads
@@ -32,12 +36,13 @@ export function createMemoryHistory() {
       return items[index];
     },
     backIndex({
-      path
+      path,
+      state
     }) {
       // We need to find the index from the element before current to get closest path to go back to
       for (let i = index - 1; i >= 0; i--) {
         const item = items[i];
-        if (item.path === path) {
+        if (item.path === path && findFocusedRouteKey(item.state) === findFocusedRouteKey(state)) {
           return i;
         }
       }
@@ -77,7 +82,7 @@ export function createMemoryHistory() {
 
       // Need to keep the hash part of the path if there was no previous history entry
       // or the previous history entry had the same path
-      let pathWithHash = path;
+      let pathWithHash = path.replace(/(\/{2,})/g, '/');
       const hash = pathWithHash.includes('#') ? '' : location.hash;
       if (!items.length || items.findIndex(item => item.id === id) < 0) {
         // There are two scenarios for creating an array with only one history record:
@@ -211,6 +216,5 @@ export function createMemoryHistory() {
       return () => window.removeEventListener('popstate', onPopState);
     }
   };
-  return history;
 }
 //# sourceMappingURL=createMemoryHistory.js.map
\ No newline at end of file
diff --git a/node_modules/@react-navigation/native/lib/module/findFocusedRouteKey.js b/node_modules/@react-navigation/native/lib/module/findFocusedRouteKey.js
new file mode 100644
index 0000000..b996822
--- /dev/null
+++ b/node_modules/@react-navigation/native/lib/module/findFocusedRouteKey.js
@@ -0,0 +1,8 @@
+"use strict";
+
+import { findFocusedRoute } from '@react-navigation/core';
+export function findFocusedRouteKey(state) {
+    const focusedRoute = findFocusedRoute(state);
+    return focusedRoute?.key;
+}
+//# sourceMappingURL=findFocusedRouteKey.js.map
