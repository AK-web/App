diff --git a/node_modules/react-native-tab-view/src/PagerViewAdapter.tsx b/node_modules/react-native-tab-view/src/PagerViewAdapter.tsx
index 7d2448b..17531cb 100644
--- a/node_modules/react-native-tab-view/src/PagerViewAdapter.tsx
+++ b/node_modules/react-native-tab-view/src/PagerViewAdapter.tsx
@@ -17,6 +17,7 @@ const AnimatedViewPager = Animated.createAnimatedComponent(ViewPager);
 
 type Props<T extends Route> = PagerProps & {
   onIndexChange: (index: number) => void;
+  onTabSelect?: (index: number) => void;
   navigationState: NavigationState<T>;
   children: (
     props: EventEmitterProps & {
@@ -38,6 +39,7 @@ export function PagerViewAdapter<T extends Route>({
   swipeEnabled = true,
   navigationState,
   onIndexChange,
+  onTabSelect,
   onSwipeStart,
   onSwipeEnd,
   children,
@@ -166,6 +168,7 @@ export function PagerViewAdapter<T extends Route>({
           position.setValue(index);
           setForceRender((fr) => fr+1)
           onIndexChange(index);
+          onTabSelect?.(index);
         }}
         onPageScrollStateChanged={onPageScrollStateChanged}
         scrollEnabled={swipeEnabled}
diff --git a/node_modules/react-native-tab-view/src/PanResponderAdapter.tsx b/node_modules/react-native-tab-view/src/PanResponderAdapter.tsx
index dbe7ed6..2afa90b 100644
--- a/node_modules/react-native-tab-view/src/PanResponderAdapter.tsx
+++ b/node_modules/react-native-tab-view/src/PanResponderAdapter.tsx
@@ -3,6 +3,7 @@ import {
   Animated,
   GestureResponderEvent,
   I18nManager,
+  InteractionManager,
   Keyboard,
   PanResponder,
   PanResponderGestureState,
@@ -23,6 +24,7 @@ import { useAnimatedValue } from './useAnimatedValue';
 type Props<T extends Route> = PagerProps & {
   layout: Layout;
   onIndexChange: (index: number) => void;
+  onTabSelect?: (index: number) => void;
   navigationState: NavigationState<T>;
   children: (
     props: EventEmitterProps & {
@@ -55,6 +57,7 @@ export function PanResponderAdapter<T extends Route>({
   swipeEnabled = true,
   navigationState,
   onIndexChange,
+  onTabSelect,
   onSwipeStart,
   onSwipeEnd,
   children,
@@ -70,6 +73,7 @@ export function PanResponderAdapter<T extends Route>({
   const navigationStateRef = React.useRef(navigationState);
   const layoutRef = React.useRef(layout);
   const onIndexChangeRef = React.useRef(onIndexChange);
+  const onTabSelectRef = React.useRef(onTabSelect);
 
   const currentIndexRef = React.useRef(index);
   const pendingIndexRef = React.useRef<number>();
@@ -77,6 +81,12 @@ export function PanResponderAdapter<T extends Route>({
   const swipeVelocityThreshold = 0.15;
   const swipeDistanceThreshold = layout.width / 1.75;
 
+  const onTabSelectHandler = React.useCallback((tabIndex = index) => {
+    InteractionManager.runAfterInteractions(() => {
+      onTabSelectRef.current?.(tabIndex);
+    });
+  }, []);
+
   const jumpToIndex = React.useCallback(
     (index: number, animate = animationEnabled) => {
       const offset = -index * layoutRef.current.width;
@@ -93,6 +103,7 @@ export function PanResponderAdapter<T extends Route>({
         ]).start(({ finished }) => {
           if (finished) {
             onIndexChangeRef.current(index);
+            onTabSelectHandler(index);
             pendingIndexRef.current = undefined;
           }
         });
@@ -100,6 +111,7 @@ export function PanResponderAdapter<T extends Route>({
       } else {
         panX.setValue(offset);
         onIndexChangeRef.current(index);
+        onTabSelectHandler(index);
         pendingIndexRef.current = undefined;
       }
     },
@@ -110,13 +122,15 @@ export function PanResponderAdapter<T extends Route>({
     navigationStateRef.current = navigationState;
     layoutRef.current = layout;
     onIndexChangeRef.current = onIndexChange;
+    onTabSelectRef.current = onTabSelect;
   });
 
   React.useEffect(() => {
     const offset = -navigationStateRef.current.index * layout.width;
 
     panX.setValue(offset);
-  }, [layout.width, panX]);
+    onTabSelectHandler();
+  }, [layout.width, panX, onTabSelectHandler]);
 
   React.useEffect(() => {
     if (keyboardDismissMode === 'auto') {
diff --git a/node_modules/react-native-tab-view/src/TabView.tsx b/node_modules/react-native-tab-view/src/TabView.tsx
index bb1f531..3752ea9 100644
--- a/node_modules/react-native-tab-view/src/TabView.tsx
+++ b/node_modules/react-native-tab-view/src/TabView.tsx
@@ -20,6 +20,7 @@ import type {
 
 export type Props<T extends Route> = PagerProps & {
   onIndexChange: (index: number) => void;
+  onTabSelect?: (index: number) => void;
   navigationState: NavigationState<T>;
   renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;
   renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;
@@ -37,6 +38,7 @@ export type Props<T extends Route> = PagerProps & {
 
 export function TabView<T extends Route>({
   onIndexChange,
+  onTabSelect,
   navigationState,
   renderScene,
   initialLayout,
@@ -89,6 +91,7 @@ export function TabView<T extends Route>({
         onSwipeStart={onSwipeStart}
         onSwipeEnd={onSwipeEnd}
         onIndexChange={jumpToIndex}
+        onTabSelect={onTabSelect}
         animationEnabled={animationEnabled}
         overScrollMode={overScrollMode}
         style={pagerStyle}
