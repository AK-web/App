diff --git a/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java
new file mode 100644
index 0000000..a1bed79
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java
@@ -0,0 +1,113 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class CameraViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & CameraViewManagerInterface<T>> extends aseViewManagerDelegate<T, U> {
+  public CameraViewManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "enableGpuBuffers":
+        mViewManager.setEnableGpuBuffers(view, value == null ? false : (boolean) value);
+        break;
+      case "androidPreviewViewType":
+        mViewManager.setAndroidPreviewViewType(view, value == null ? null : (String) value);
+        break;
+      case "codeScannerOptions":
+        mViewManager.setCodeScannerOptions(view, (ReadableMap) value);
+        break;
+      case "cameraId":
+        mViewManager.setCameraId(view, value == null ? null : (String) value);
+        break;
+      case "enableFrameProcessor":
+        mViewManager.setEnableFrameProcessor(view, value == null ? false : (boolean) value);
+        break;
+      case "enableLocation":
+        mViewManager.setEnableLocation(view, value == null ? false : (boolean) value);
+        break;
+      case "enableBufferCompression":
+        mViewManager.setEnableBufferCompression(view, value == null ? false : (boolean) value);
+        break;
+      case "photoQualityBalance":
+        mViewManager.setPhotoQualityBalance(view, value == null ? null : (String) value);
+        break;
+      case "isActive":
+        mViewManager.setIsActive(view, value == null ? false : (boolean) value);
+        break;
+      case "photo":
+        mViewManager.setPhoto(view, value == null ? false : (boolean) value);
+        break;
+      case "video":
+        mViewManager.setVideo(view, value == null ? false : (boolean) value);
+        break;
+      case "audio":
+        mViewManager.setAudio(view, value == null ? false : (boolean) value);
+        break;
+      case "torch":
+        mViewManager.setTorch(view, value == null ? null : (String) value);
+        break;
+      case "zoom":
+        mViewManager.setZoom(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      case "exposure":
+        mViewManager.setExposure(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      case "enableZoomGesture":
+        mViewManager.setEnableZoomGesture(view, value == null ? false : (boolean) value);
+        break;
+      case "enableFpsGraph":
+        mViewManager.setEnableFpsGraph(view, value == null ? false : (boolean) value);
+        break;
+      case "resizeMode":
+        mViewManager.setResizeMode(view, value == null ? null : (String) value);
+        break;
+      case "format":
+        mViewManager.setFormat(view, (ReadableMap) value);
+        break;
+      case "pixelFormat":
+        mViewManager.setPixelFormat(view, value == null ? null : (String) value);
+        break;
+      case "fps":
+        mViewManager.setFps(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "videoHdr":
+        mViewManager.setVideoHdr(view, value == null ? false : (boolean) value);
+        break;
+      case "photoHdr":
+        mViewManager.setPhotoHdr(view, value == null ? false : (boolean) value);
+        break;
+      case "lowLightBoost":
+        mViewManager.setLowLightBoost(view, value == null ? false : (boolean) value);
+        break;
+      case "videoStabilizationMode":
+        mViewManager.setVideoStabilizationMode(view, value == null ? null : (String) value);
+        break;
+      case "enableDepthData":
+        mViewManager.setEnableDepthData(view, value == null ? false : (boolean) value);
+        break;
+      case "enablePortraitEffectsMatteDelivery":
+        mViewManager.setEnablePortraitEffectsMatteDelivery(view, value == null ? false : (boolean) value);
+        break;
+      case "orientation":
+        mViewManager.setOrientation(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java
new file mode 100644
index 0000000..94079b2
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java
@@ -0,0 +1,45 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface CameraViewManagerInterface<T extends View> {
+  void setEnableGpuBuffers(T view, boolean value);
+  void setAndroidPreviewViewType(T view, @Nullable String value);
+  void setCodeScannerOptions(T view, @Nullable ReadableMap value);
+  void setCameraId(T view, @Nullable String value);
+  void setEnableFrameProcessor(T view, boolean value);
+  void setEnableLocation(T view, boolean value);
+  void setEnableBufferCompression(T view, boolean value);
+  void setPhotoQualityBalance(T view, @Nullable String value);
+  void setIsActive(T view, boolean value);
+  void setPhoto(T view, boolean value);
+  void setVideo(T view, boolean value);
+  void setAudio(T view, boolean value);
+  void setTorch(T view, @Nullable String value);
+  void setZoom(T view, double value);
+  void setExposure(T view, double value);
+  void setEnableZoomGesture(T view, boolean value);
+  void setEnableFpsGraph(T view, boolean value);
+  void setResizeMode(T view, @Nullable String value);
+  void setFormat(T view, @Nullable ReadableMap value);
+  void setPixelFormat(T view, @Nullable String value);
+  void setFps(T view, int value);
+  void setVideoHdr(T view, boolean value);
+  void setPhotoHdr(T view, boolean value);
+  void setLowLightBoost(T view, boolean value);
+  void setVideoStabilizationMode(T view, @Nullable String value);
+  void setEnableDepthData(T view, boolean value);
+  void setEnablePortraitEffectsMatteDelivery(T view, boolean value);
+  void setOrientation(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-vision-camera/android/settings.gradle b/node_modules/react-native-vision-camera/android/settings.gradle
new file mode 100644
index 0000000..56a6c3d
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/settings.gradle
@@ -0,0 +1,3 @@
+rootProject.name = 'VisionCamera'
+
+include ':VisionCamera'
diff --git a/node_modules/react-native-vision-camera/ios/RNCameraView.h b/node_modules/react-native-vision-camera/ios/RNCameraView.h
new file mode 100644
index 0000000..46c2c2c
--- /dev/null
+++ b/node_modules/react-native-vision-camera/ios/RNCameraView.h
@@ -0,0 +1,14 @@
+// This guard prevent this file to be compiled in the old architecture.
+#ifdef RCT_NEW_ARCH_ENABLED
+#import <React/RCTViewComponentView.h>
+#import <UIKit/UIKit.h>
+
+
+NS_ASSUME_NONNULL_BEGIN
+
+@interface RNCameraView : RCTViewComponentView
+@end
+
+NS_ASSUME_NONNULL_END
+
+#endif /* RCT_NEW_ARCH_ENABLED */
diff --git a/node_modules/react-native-vision-camera/ios/RNCameraView.mm b/node_modules/react-native-vision-camera/ios/RNCameraView.mm
new file mode 100644
index 0000000..b6e7f6d
--- /dev/null
+++ b/node_modules/react-native-vision-camera/ios/RNCameraView.mm
@@ -0,0 +1,377 @@
+// This guard prevent the code from being compiled in the old architecture
+#ifdef RCT_NEW_ARCH_ENABLED
+#import <React/RCTViewComponentView.h>
+
+#import <react/renderer/components/RNVisionCameraSpec/ComponentDescriptors.h>
+#import <react/renderer/components/RNVisionCameraSpec/EventEmitters.h>
+#import <react/renderer/components/RNVisionCameraSpec/Props.h>
+#import <react/renderer/components/RNVisionCameraSpec/RCTComponentViewHelpers.h>
+
+#import "RCTFabricComponentsPlugins.h"
+#import <AVFoundation/AVCaptureAudioDataOutput.h>
+#import <AVFoundation/AVCaptureVideoDataOutput.h>
+#import <React/RCTViewManager.h>
+#import <React/RCTConversions.h>
+
+#ifdef USE_FRAMEWORKS
+#import <VisionCamera/VisionCamera-Swift.h>
+#else
+#import "VisionCamera-Swift.h"
+#endif
+
+@interface RNCameraView : RCTViewComponentView <RNCameraViewDirectEventDelegate>
+@end
+
+
+using namespace facebook::react;
+
+@implementation RNCameraView {
+    CameraView * _view;
+}
+
++ (ComponentDescriptorProvider)componentDescriptorProvider
+{
+    return concreteComponentDescriptorProvider<CameraViewComponentDescriptor>();
+}
+
+- (instancetype)initWithFrame:(CGRect)frame
+{
+    self = [super initWithFrame:frame];
+    if (self) {
+        static const auto defaultProps = std::make_shared<const CameraViewProps>();
+        _props = defaultProps;
+
+        // The remaining part of the initializer is standard Objective-C code to create views and layout them with AutoLayout. Here we can change whatever we want to.
+        _view = [[CameraView alloc] init];
+        _view.delegate = self;
+
+        self.contentView = _view;
+    }
+
+    return self;
+}
+
+// why we need this func -> https://reactnative.dev/docs/next/the-new-architecture/pillars-fabric-components#write-the-native-ios-code
+- (void)updateProps:(Props::Shared const &)props oldProps:(Props::Shared const &)oldProps
+{
+    const auto &newViewProps = *std::static_pointer_cast<CameraViewProps const>(props);
+    const auto &oldViewProps = *std::static_pointer_cast<CameraViewProps const>(_props);
+
+    NSMutableArray* changedProps = [[NSMutableArray alloc] init];
+
+    if(oldViewProps.isActive != newViewProps.isActive){
+        _view.isActive = newViewProps.isActive;
+        [changedProps addObject:@"isActive"];
+    }
+    if(oldViewProps.cameraId != newViewProps.cameraId){
+        _view.cameraId = RCTNSStringFromString(newViewProps.cameraId);
+        [changedProps addObject:@"cameraId"];
+    }
+    if(oldViewProps.photoQualityBalance != newViewProps.photoQualityBalance){
+        _view.photoQualityBalance = RCTNSStringFromString(newViewProps.photoQualityBalance);
+        [changedProps addObject:@"photoQualityBalance"];
+    }
+    if(oldViewProps.enableDepthData != newViewProps.enableDepthData){
+        _view.enableDepthData = newViewProps.enableDepthData;
+        [changedProps addObject:@"enableDepthData"];
+    }
+    if(oldViewProps.enablePortraitEffectsMatteDelivery != newViewProps.enablePortraitEffectsMatteDelivery){
+        _view.enablePortraitEffectsMatteDelivery = newViewProps.enablePortraitEffectsMatteDelivery;
+        [changedProps addObject:@"enablePortraitEffectsMatteDelivery"];
+    }
+    if(oldViewProps.photo != newViewProps.photo){
+        _view.photo = [NSNumber numberWithBool:newViewProps.photo];
+        [changedProps addObject:@"photo"];
+    }
+    if(oldViewProps.video != newViewProps.video){
+        _view.video = [NSNumber numberWithBool:newViewProps.video];
+        [changedProps addObject:@"video"];
+    }
+    if(oldViewProps.audio != newViewProps.audio){
+        _view.audio = [NSNumber numberWithBool:newViewProps.audio];
+        [changedProps addObject:@"audio"];
+    }
+    if(oldViewProps.enableFrameProcessor != newViewProps.enableFrameProcessor){
+        _view.enableFrameProcessor = newViewProps.enableFrameProcessor;
+        [changedProps addObject:@"enableFrameProcessor"];
+    }
+    if(oldViewProps.enableLocation != newViewProps.enableLocation){
+        _view.enableLocation = newViewProps.enableLocation;
+        [changedProps addObject:@"enableLocation"];
+    }
+    if(oldViewProps.enableBufferCompression != newViewProps.enableBufferCompression){
+        _view.enableBufferCompression = newViewProps.enableBufferCompression;
+        [changedProps addObject:@"enableBufferCompression"];
+    }
+    if(oldViewProps.fps != newViewProps.fps){
+        _view.fps = [NSNumber numberWithInt:newViewProps.fps];
+        [changedProps addObject:@"fps"];
+    }
+    if(oldViewProps.videoHdr != newViewProps.videoHdr){
+        _view.videoHdr = newViewProps.videoHdr;
+        [changedProps addObject:@"videoHdr"];
+    }
+    if(oldViewProps.photoHdr != newViewProps.photoHdr){
+        _view.photoHdr = newViewProps.photoHdr;
+        [changedProps addObject:@"photoHdr"];
+    }
+    if(oldViewProps.lowLightBoost != newViewProps.lowLightBoost){
+        _view.lowLightBoost = newViewProps.lowLightBoost;
+        [changedProps addObject:@"lowLightBoost"];
+    }
+    if(oldViewProps.videoStabilizationMode != newViewProps.videoStabilizationMode){
+        _view.videoStabilizationMode = RCTNSStringFromString(newViewProps.videoStabilizationMode);
+        [changedProps addObject:@"videoStabilizationMode"];
+    }
+    if(oldViewProps.torch != newViewProps.torch){
+        _view.torch = RCTNSStringFromString(newViewProps.torch);
+        [changedProps addObject:@"torch"];
+    }
+    if(oldViewProps.orientation != newViewProps.orientation){
+        _view.orientation = RCTNSStringFromString(newViewProps.orientation);
+        [changedProps addObject:@"orientation"];
+    }
+    if(oldViewProps.resizeMode != newViewProps.resizeMode){
+        _view.resizeMode = RCTNSStringFromString(newViewProps.resizeMode);
+        [changedProps addObject:@"resizeMode"];
+    }
+    if(oldViewProps.pixelFormat != newViewProps.pixelFormat){
+        _view.pixelFormat = RCTNSStringFromString(newViewProps.pixelFormat);
+        [changedProps addObject:@"pixelFormat"];
+    }
+    if(oldViewProps.zoom != newViewProps.zoom){
+        _view.zoom = [NSNumber numberWithDouble:newViewProps.zoom];
+        [changedProps addObject:@"zoom"];
+    }
+    if(oldViewProps.exposure != newViewProps.exposure){
+        _view.exposure = [NSNumber numberWithDouble:newViewProps.exposure];
+        [changedProps addObject:@"exposure"];
+    }
+    if(oldViewProps.enableZoomGesture != newViewProps.enableZoomGesture){
+        _view.enableZoomGesture = newViewProps.enableZoomGesture;
+        [changedProps addObject:@"enableZoomGesture"];
+    }
+    if(oldViewProps.enableFpsGraph != newViewProps.enableFpsGraph){
+        _view.enableFpsGraph = newViewProps.enableFpsGraph;
+        [changedProps addObject:@"enableFpsGraph"];
+    }
+
+
+    if(_view.format == nil){
+        _view.format =[ [NSMutableDictionary alloc] init];
+    }
+
+
+    //Checking format props, TODO: find cleaner way to do it
+    if(oldViewProps.format.supportsDepthCapture != newViewProps.format.supportsDepthCapture){
+        NSNumber* supportsDepthCapture = newViewProps.format.supportsDepthCapture ? @1 : @0;
+        [_view.format setValue:supportsDepthCapture forKey:@"supportsDepthCapture"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.autoFocusSystem != newViewProps.format.autoFocusSystem){
+        [_view.format setValue:RCTNSStringFromString(newViewProps.format.autoFocusSystem) forKey:@"autoFocusSystem"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.pixelFormats.size() != newViewProps.format.pixelFormats.size()){
+        NSMutableArray* newPixelFormats = [[NSMutableArray alloc] init];
+        for(int i = 0; i < newViewProps.format.pixelFormats.size(); i++){
+            [newPixelFormats addObject:RCTNSStringFromString(newViewProps.format.pixelFormats.at(i))];
+        }
+        [_view.format setValue:newPixelFormats forKey:@"pixelFormats"];
+        [changedProps addObject:@"format"];
+    }
+
+    if(oldViewProps.format.videoStabilizationModes.size() != newViewProps.format.videoStabilizationModes.size()){
+        NSMutableArray* newVideoStabilizationModes = [[NSMutableArray alloc] init];
+        for(int i = 0; i < newViewProps.format.videoStabilizationModes.size(); i++){
+            [newVideoStabilizationModes addObject:RCTNSStringFromString(newViewProps.format.videoStabilizationModes.at(i))];
+        }
+        [_view.format setValue:newVideoStabilizationModes forKey:@"videoStabilizationModes"];
+        [changedProps addObject:@"format"];
+    }
+
+    if(oldViewProps.format.photoHeight != newViewProps.format.photoHeight){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.photoHeight] forKey:@"photoHeight"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.photoWidth != newViewProps.format.photoWidth){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.photoWidth] forKey:@"photoWidth"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.videoHeight != newViewProps.format.videoHeight){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.videoHeight] forKey:@"videoHeight"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.videoWidth != newViewProps.format.videoWidth){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.videoWidth] forKey:@"videoWidth"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.maxISO != newViewProps.format.maxISO){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.maxISO] forKey:@"maxISO"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.minISO != newViewProps.format.minISO){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.minISO] forKey:@"minISO"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.maxFps != newViewProps.format.maxFps){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.maxFps] forKey:@"maxFps"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.minFps != newViewProps.format.minFps){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.minFps] forKey:@"minFps"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.fieldOfView != newViewProps.format.fieldOfView){
+        [_view.format setValue:[NSNumber numberWithDouble:newViewProps.format.fieldOfView] forKey:@"fieldOfView"];
+        [changedProps addObject:@"format"];
+    }
+
+    if(oldViewProps.format.supportsVideoHDR != newViewProps.format.supportsVideoHDR){
+        NSNumber* supportsVideoHDR = newViewProps.format.supportsVideoHDR ? @1 : @0;
+        [_view.format setValue:supportsVideoHDR forKey:@"supportsVideoHDR"];
+        [changedProps addObject:@"format"];
+    }
+    if(oldViewProps.format.supportsPhotoHDR != newViewProps.format.supportsPhotoHDR){
+        NSNumber* supportsPhotoHDR = newViewProps.format.supportsPhotoHDR ? @1 : @0;
+        [_view.format setValue:supportsPhotoHDR forKey:@"supportsPhotoHDR"];
+        [changedProps addObject:@"format"];
+    }
+
+    if (_view.format.count == 0) {
+        _view.format = nil;
+    }
+
+    if(_view.codeScannerOptions == nil){
+        _view.codeScannerOptions =[[NSMutableDictionary alloc] init];
+    }
+
+    if(oldViewProps.codeScannerOptions.codeTypes.size() != newViewProps.codeScannerOptions.codeTypes.size()){
+        NSMutableArray* newCodeTypes = [[NSMutableArray alloc] init];
+        for(int i = 0; i < newViewProps.codeScannerOptions.codeTypes.size(); i++){
+            [newCodeTypes addObject:RCTNSStringFromString(newViewProps.codeScannerOptions.codeTypes.at(i))];
+        }
+        [_view.codeScannerOptions setValue:newCodeTypes forKey:@"codeTypes"];
+        [changedProps addObject:@"codeScannerOptions"];
+    }
+
+    if(oldViewProps.codeScannerOptions.interval != newViewProps.codeScannerOptions.interval){
+        [_view.codeScannerOptions setValue:[NSNumber numberWithDouble:newViewProps.codeScannerOptions.interval] forKey:@"interval"];
+        [changedProps addObject:@"codeScannerOptions"];
+    }
+
+    if(
+       oldViewProps.codeScannerOptions.regionOfInterest.x != newViewProps.codeScannerOptions.regionOfInterest.x ||
+       oldViewProps.codeScannerOptions.regionOfInterest.y != newViewProps.codeScannerOptions.regionOfInterest.y ||
+       oldViewProps.codeScannerOptions.regionOfInterest.width != newViewProps.codeScannerOptions.regionOfInterest.width ||
+       oldViewProps.codeScannerOptions.regionOfInterest.height != newViewProps.codeScannerOptions.regionOfInterest.height
+       ){
+        NSDictionary *newRegionOfInterest = @{
+            @"x": @(newViewProps.codeScannerOptions.regionOfInterest.x),
+            @"y": @(newViewProps.codeScannerOptions.regionOfInterest.y),
+            @"width": @(newViewProps.codeScannerOptions.regionOfInterest.width),
+            @"height": @(newViewProps.codeScannerOptions.regionOfInterest.height),
+        };
+        [_view.codeScannerOptions setValue:newRegionOfInterest forKey:@"regionOfInterest"];
+        [changedProps addObject:@"codeScannerOptions"];
+    }
+
+    if (_view.codeScannerOptions.count == 0) {
+        _view.codeScannerOptions = nil;
+    }
+
+    [_view didSetProps:changedProps];
+
+    [super updateProps:props oldProps:oldProps];
+}
+
+- (void)onViewReady{
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onViewReady( CameraViewEventEmitter::OnViewReady{});
+    }
+}
+
+- (void)onErrorWithError:(NSDictionary *)error{
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onError( CameraViewEventEmitter::OnError{
+            .code = std::string([(error != nil ? [error objectForKey:@"code"] : @"") UTF8String]),
+            .message = std::string([(error != nil ? [error objectForKey:@"message"] : @"") UTF8String]),
+            .cause = {
+                .code = std::string([(error != nil ? [[error objectForKey:@"cause"] objectForKey:@"code"] : @"") UTF8String]), // TODO: Further ecure type safety to prevent crashes
+                .domain = std::string([(error != nil ? [[error objectForKey:@"cause"] objectForKey:@"domain"]  : @"") UTF8String]),
+                .message = std::string([(error != nil ? [[error objectForKey:@"cause"] objectForKey:@"message"]  : @"") UTF8String]),
+                .details = std::string([(error != nil ? [[error objectForKey:@"cause"] objectForKey:@"details"]  : @"") UTF8String])
+            }
+        });
+    }
+}
+
+- (void)onInitialized{
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onInitialized( CameraViewEventEmitter::OnInitialized{});
+    }
+}
+
+- (void)onCodeScannedWithMessage:(NSDictionary *)message {
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onCodeScanned( CameraViewEventEmitter::OnCodeScanned{
+            .codes = {
+                .type = std::string([(message != nil ? [[message objectForKey:@"codes"] objectForKey:@"type"] : @"") UTF8String]),
+                .value = std::string([(message != nil ? [[message objectForKey:@"codes"] objectForKey:@"value"] : @"") UTF8String]),
+                .frame = {
+                    .x = [(message != nil ? [[[message objectForKey:@"codes"] objectForKey:@"frame"] objectForKey:@"x"] : @0) doubleValue],
+                    .y = [(message != nil ? [[[message objectForKey:@"codes"] objectForKey:@"frame"] objectForKey:@"y"] : @0) doubleValue],
+                    .width = [(message != nil ? [[[message objectForKey:@"codes"] objectForKey:@"frame"] objectForKey:@"width"] : @0) doubleValue],
+                    .height = [(message != nil ? [[[message objectForKey:@"codes"] objectForKey:@"frame"] objectForKey:@"height"] : @0) oubleValue],
+                },
+            },
+            .frame = {
+                .width = [(message != nil ? [[message objectForKey:@"frame"] objectForKey:@"width"] : @0) intValue],
+                .height = [(message != nil ? [[message objectForKey:@"frame"] objectForKey:@"height"] : @0) intValue],
+            },
+            // nothing is sent here from CameraView
+            .corners = {
+                .x = [(message != nil ? [[message objectForKey:@"corners"] objectForKey:@"x"] : @0) doubleValue],
+                .y = [(message != nil ? [[message objectForKey:@"corners"] objectForKey:@"y"] : @0) doubleValue],
+            }
+        });
+    }
+}
+
+
+- (void)onShutterWithMessage:(NSDictionary *)message {
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onShutter( CameraViewEventEmitter::OnShutter{
+            .type = std::string([(message != nil ? [message objectForKey:@"type"] : @"") UTF8String]),
+        });
+    }
+}
+
+
+- (void)onStarted {
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onStarted( CameraViewEventEmitter::OnStarted{});
+    }
+}
+
+
+- (void)onStopped {
+    if(_eventEmitter){
+        std::dynamic_pointer_cast<const CameraViewEventEmitter>(_eventEmitter)
+        ->onViewReady( CameraViewEventEmitter::OnViewReady{});
+    }
+}
+
+Class<RCTComponentViewProtocol> CameraViewCls(void)
+{
+    return RNCameraView.class;
+}
+
+@end
+#endif