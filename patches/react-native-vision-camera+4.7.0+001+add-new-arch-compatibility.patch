diff --git a/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java
new file mode 100644
index 0000000..a1bed79
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerDelegate.java
@@ -0,0 +1,113 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaDelegate.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.uimanager.BaseViewManagerDelegate;
+import com.facebook.react.uimanager.BaseViewManagerInterface;
+
+public class CameraViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & CameraViewManagerInterface<T>> extends aseViewManagerDelegate<T, U> {
+  public CameraViewManagerDelegate(U viewManager) {
+    super(viewManager);
+  }
+  @Override
+  public void setProperty(T view, String propName, @Nullable Object value) {
+    switch (propName) {
+      case "enableGpuBuffers":
+        mViewManager.setEnableGpuBuffers(view, value == null ? false : (boolean) value);
+        break;
+      case "androidPreviewViewType":
+        mViewManager.setAndroidPreviewViewType(view, value == null ? null : (String) value);
+        break;
+      case "codeScannerOptions":
+        mViewManager.setCodeScannerOptions(view, (ReadableMap) value);
+        break;
+      case "cameraId":
+        mViewManager.setCameraId(view, value == null ? null : (String) value);
+        break;
+      case "enableFrameProcessor":
+        mViewManager.setEnableFrameProcessor(view, value == null ? false : (boolean) value);
+        break;
+      case "enableLocation":
+        mViewManager.setEnableLocation(view, value == null ? false : (boolean) value);
+        break;
+      case "enableBufferCompression":
+        mViewManager.setEnableBufferCompression(view, value == null ? false : (boolean) value);
+        break;
+      case "photoQualityBalance":
+        mViewManager.setPhotoQualityBalance(view, value == null ? null : (String) value);
+        break;
+      case "isActive":
+        mViewManager.setIsActive(view, value == null ? false : (boolean) value);
+        break;
+      case "photo":
+        mViewManager.setPhoto(view, value == null ? false : (boolean) value);
+        break;
+      case "video":
+        mViewManager.setVideo(view, value == null ? false : (boolean) value);
+        break;
+      case "audio":
+        mViewManager.setAudio(view, value == null ? false : (boolean) value);
+        break;
+      case "torch":
+        mViewManager.setTorch(view, value == null ? null : (String) value);
+        break;
+      case "zoom":
+        mViewManager.setZoom(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      case "exposure":
+        mViewManager.setExposure(view, value == null ? 0f : ((Double) value).doubleValue());
+        break;
+      case "enableZoomGesture":
+        mViewManager.setEnableZoomGesture(view, value == null ? false : (boolean) value);
+        break;
+      case "enableFpsGraph":
+        mViewManager.setEnableFpsGraph(view, value == null ? false : (boolean) value);
+        break;
+      case "resizeMode":
+        mViewManager.setResizeMode(view, value == null ? null : (String) value);
+        break;
+      case "format":
+        mViewManager.setFormat(view, (ReadableMap) value);
+        break;
+      case "pixelFormat":
+        mViewManager.setPixelFormat(view, value == null ? null : (String) value);
+        break;
+      case "fps":
+        mViewManager.setFps(view, value == null ? 0 : ((Double) value).intValue());
+        break;
+      case "videoHdr":
+        mViewManager.setVideoHdr(view, value == null ? false : (boolean) value);
+        break;
+      case "photoHdr":
+        mViewManager.setPhotoHdr(view, value == null ? false : (boolean) value);
+        break;
+      case "lowLightBoost":
+        mViewManager.setLowLightBoost(view, value == null ? false : (boolean) value);
+        break;
+      case "videoStabilizationMode":
+        mViewManager.setVideoStabilizationMode(view, value == null ? null : (String) value);
+        break;
+      case "enableDepthData":
+        mViewManager.setEnableDepthData(view, value == null ? false : (boolean) value);
+        break;
+      case "enablePortraitEffectsMatteDelivery":
+        mViewManager.setEnablePortraitEffectsMatteDelivery(view, value == null ? false : (boolean) value);
+        break;
+      case "orientation":
+        mViewManager.setOrientation(view, value == null ? null : (String) value);
+        break;
+      default:
+        super.setProperty(view, propName, value);
+    }
+  }
+}
diff --git a/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java
new file mode 100644
index 0000000..94079b2
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/oldarch/src/main/java/com/facebook/react/viewmanagers/CameraViewManagerInterface.java
@@ -0,0 +1,45 @@
+/**
+* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+*
+* Do not edit this file as changes may cause incorrect behavior and will be lost
+* once the code is regenerated.
+*
+* @generated by codegen project: GeneratePropsJavaInterface.js
+*/
+
+package com.facebook.react.viewmanagers;
+
+import android.view.View;
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.ReadableMap;
+
+public interface CameraViewManagerInterface<T extends View> {
+  void setEnableGpuBuffers(T view, boolean value);
+  void setAndroidPreviewViewType(T view, @Nullable String value);
+  void setCodeScannerOptions(T view, @Nullable ReadableMap value);
+  void setCameraId(T view, @Nullable String value);
+  void setEnableFrameProcessor(T view, boolean value);
+  void setEnableLocation(T view, boolean value);
+  void setEnableBufferCompression(T view, boolean value);
+  void setPhotoQualityBalance(T view, @Nullable String value);
+  void setIsActive(T view, boolean value);
+  void setPhoto(T view, boolean value);
+  void setVideo(T view, boolean value);
+  void setAudio(T view, boolean value);
+  void setTorch(T view, @Nullable String value);
+  void setZoom(T view, double value);
+  void setExposure(T view, double value);
+  void setEnableZoomGesture(T view, boolean value);
+  void setEnableFpsGraph(T view, boolean value);
+  void setResizeMode(T view, @Nullable String value);
+  void setFormat(T view, @Nullable ReadableMap value);
+  void setPixelFormat(T view, @Nullable String value);
+  void setFps(T view, int value);
+  void setVideoHdr(T view, boolean value);
+  void setPhotoHdr(T view, boolean value);
+  void setLowLightBoost(T view, boolean value);
+  void setVideoStabilizationMode(T view, @Nullable String value);
+  void setEnableDepthData(T view, boolean value);
+  void setEnablePortraitEffectsMatteDelivery(T view, boolean value);
+  void setOrientation(T view, @Nullable String value);
+}
diff --git a/node_modules/react-native-vision-camera/android/settings.gradle b/node_modules/react-native-vision-camera/android/settings.gradle
new file mode 100644
index 0000000..56a6c3d
--- /dev/null
+++ b/node_modules/react-native-vision-camera/android/settings.gradle
@@ -0,0 +1,3 @@
+rootProject.name = 'VisionCamera'
+
+include ':VisionCamera'