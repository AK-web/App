diff --git a/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js
new file mode 100644
index 0000000..b20528b
--- /dev/null
+++ b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js
@@ -0,0 +1,44 @@
+let isInitialized = false;
+let justFinishedEdgeGestureFromLeft = false;
+let expectingTouchend = false;
+
+/// This returns information if the user just performed edge gesture on iOS safari to navigate in the browser history.
+export const getIsEdgeDragGesture = () => {
+return expectingTouchend || justFinishedEdgeGestureFromLeft;
+};
+
+// We need to manualy reset this flag after deciding if there should be animation for navigation.
+export const resetExpectingTouchendWithDelay = () => {
+    setTimeout(() => {
+        expectingTouchend = false;
+    }, 100);
+};
+
+export const maybeInitializeEdgeDragGestureMonitor = () => {
+    if (isInitialized) {
+        return;
+    }
+    isInitialized = true;
+    let timer;
+    // Gestures that would trigger navigation forward are broken on iOS safari.
+    // They don't have touchend event fired so we can look at expectingTouchEnd flag to detect if we should run animation.
+
+    const handleTouchStart = () => {
+        expectingTouchend = true;
+    };
+    const handleTouchEnd = e => {
+        var _e$changedTouches$;
+        const pageX = (_e$changedTouches$ = e.changedTouches[0]) === null || _e$changedTouches$ === void 0 ? void 0 : _e$changedTouches$.pageX;
+        // PageX for gesture that would trigger navigation back is negative.
+        if (pageX < 0) {
+            if (timer) {
+                clearTimeout(timer);
+            }
+            justFinishedEdgeGestureFromLeft = true;
+            timer = setTimeout(() => justFinishedEdgeGestureFromLeft = false, 100);
+        }
+            expectingTouchend = false;
+    };
+    document.addEventListener('touchstart', handleTouchStart);
+    document.addEventListener('touchend', handleTouchEnd);
+};
diff --git a/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js
new file mode 100644
index 0000000..668d198
--- /dev/null
+++ b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js
@@ -0,0 +1,5 @@
+// We don't need edgeDragGestureMonitor for native platforms.
+
+export const getIsEdgeDragGesture = () => false;
+export const resetExpectingTouchendWithDelay = () => {};
+export const maybeInitializeEdgeDragGestureMonitor = () => {};
diff --git a/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js b/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
index e8e6e90..c253575 100644
--- a/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
+++ b/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
@@ -4,6 +4,7 @@ import Color from 'color';
 import * as React from 'react';
 import { Animated, InteractionManager, Platform, StyleSheet, View } from 'react-native';
 import { CardAnimationContext } from "../../utils/CardAnimationContext.js";
+import { getIsEdgeDragGesture, resetExpectingTouchendWithDelay } from '../../utils/edgeDragGestureMonitor';
 import { getDistanceForDirection } from "../../utils/getDistanceForDirection.js";
 import { getInvertedMultiplier } from "../../utils/getInvertedMultiplier.js";
 import { getShadowStyle } from "../../utils/getShadowStyle.js";
@@ -130,6 +131,8 @@ export class Card extends React.Component {
     });
     animation(gesture, {
       ...spec.config,
+      // Detecting if the user used swipe gesture on iOS safari to trigger navigation in the browser history.
+      toValue,duration: getIsEdgeDragGesture() ? 0 : spec.config.duration,
       velocity,
       toValue,
       useNativeDriver,
@@ -139,6 +142,8 @@ export class Card extends React.Component {
     }) => {
       this.handleEndInteraction();
       clearTimeout(this.pendingGestureCallback);
+      // We need to reset edgeDragGestureMonitor manualy because of broken events on iOS safari.
+      resetExpectingTouchendWithDelay();
       if (finished) {
         if (closing) {
           onClose();
diff --git a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js
index c2240e8..7511fb0 100644
--- a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js
+++ b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.js
@@ -3,7 +3,7 @@
 import { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';
 import { useLinkBuilder, useLocale, useTheme } from '@react-navigation/native';
 import * as React from 'react';
-import { StyleSheet, View } from 'react-native';
+import { Platform, StyleSheet, View } from 'react-native';
 import { ModalPresentationContext } from "../../utils/ModalPresentationContext.js";
 import { useKeyboardManager } from "../../utils/useKeyboardManager.js";
 import { Card } from "./Card.js";
@@ -229,7 +229,8 @@ function CardContainerInner({
       display:
       // Hide unfocused screens when animation isn't enabled
       // This is also necessary for a11y on web
-      animation === 'none' && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'
+      animation === 'none' && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex',
+      zIndex: Platform.OS === 'web' ? 'auto' : undefined
     }, StyleSheet.absoluteFill],
     children: /*#__PURE__*/_jsx(View, {
       style: styles.container,
diff --git a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
index 9885b25..df0d72a 100644
--- a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
+++ b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
@@ -5,6 +5,7 @@ import * as React from 'react';
 import { Animated, Platform, StyleSheet, View } from 'react-native';
 import { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from "../../TransitionConfigs/CardStyleInterpolators.js";
 import { BottomSheetAndroid, DefaultTransition, FadeFromBottomAndroid, FadeFromRightAndroid, ModalFadeTransition, ModalSlideFromBottomIOS, ModalTransition, RevealFromBottomAndroid, ScaleFromCenterAndroid, SlideFromLeftIOS, SlideFromRightIOS } from "../../TransitionConfigs/TransitionPresets.js";
+import { maybeInitializeEdgeDragGestureMonitor } from '../../utils/edgeDragGestureMonitor';
 import { findLastIndex } from "../../utils/findLastIndex.js";
 import { getDistanceForDirection } from "../../utils/getDistanceForDirection.js";
 import { getModalRouteKeys } from "../../utils/getModalRoutesKeys.js";
@@ -203,6 +204,8 @@ export class CardStack extends React.Component {
   }
   constructor(props) {
     super(props);
+    // Gesture monitor is only needed on iOS safari to detect if the user performed edge swipe gesture to to navigate in the browser history.
+    maybeInitializeEdgeDragGestureMonitor();
     this.state = {
       routes: [],
       scenes: [],
@@ -396,6 +399,10 @@ export class CardStack extends React.Component {
               extrapolate: 'clamp'
             }) : STATE_TRANSITIONING_OR_BELOW_TOP;
           }
+
+          const shouldNotDetachScreen = route?.dontDetachScreen && isScreenActive !== STATE_ON_TOP;
+
+
           const {
             headerShown = true,
             headerTransparent,
@@ -416,7 +423,7 @@ export class CardStack extends React.Component {
           return /*#__PURE__*/_jsx(MaybeScreen, {
             style: [StyleSheet.absoluteFill],
             enabled: detachInactiveScreens,
-            active: isScreenActive,
+            active: shouldNotDetachScreen ? STATE_TRANSITIONING_OR_BELOW_TOP : isScreenActive,
             freezeOnBlur: freezeOnBlur,
             shouldFreeze: isScreenActive === STATE_INACTIVE && !isPreloaded,
             homeIndicatorHidden: autoHideHomeIndicator,
@@ -451,7 +458,7 @@ export class CardStack extends React.Component {
               onTransitionStart: onTransitionStart,
               onTransitionEnd: onTransitionEnd,
               isNextScreenTransparent: isNextScreenTransparent,
-              detachCurrentScreen: detachCurrentScreen,
+              detachCurrentScreen: shouldNotDetachScreen ? false : detachCurrentScreen,
               preloaded: isPreloaded
             })
           }, route.key);
